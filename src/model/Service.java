package model;

// Generated 7 sept. 2015 15:10:57 by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Service generated by hbm2java
 */
@Entity
@Table(name = "service", catalog = "ccisdb")
public class Service implements java.io.Serializable {

	private Integer idService;
	private Departement departement;
	private String libelle;
	private Set<Recepteur> recepteurs = new HashSet<Recepteur>(0);

	public Service() {
	}

	public Service(Departement departement, String libelle) {
		this.departement = departement;
		this.libelle = libelle;
	}

	public Service(Departement departement, String libelle,
			Set<Recepteur> recepteurs) {
		this.departement = departement;
		this.libelle = libelle;
		this.recepteurs = recepteurs;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "idService", unique = true, nullable = false)
	public Integer getIdService() {
		return this.idService;
	}

	public void setIdService(Integer idService) {
		this.idService = idService;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "departement_idDepartement", nullable = false)
	public Departement getDepartement() {
		return this.departement;
	}

	public void setDepartement(Departement departement) {
		this.departement = departement;
	}

	@Column(name = "libelle", nullable = false, length = 45)
	public String getLibelle() {
		return this.libelle;
	}

	public void setLibelle(String libelle) {
		this.libelle = libelle;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "service")
	public Set<Recepteur> getRecepteurs() {
		return this.recepteurs;
	}

	public void setRecepteurs(Set<Recepteur> recepteurs) {
		this.recepteurs = recepteurs;
	}

}
